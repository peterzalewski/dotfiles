#!/usr/bin/env bash

set -eu
set -o pipefail
set -o noclobber

declare BLUE COLOR_OFF RED
BLUE="$(tput setaf 6)" && readonly BLUE
COLOR_OFF="$(tput sgr0)" && readonly COLOR_OFF
RED="$(tput setaf 1)" && readonly RED

declare PWD CURL TEMP_DIR
TEMP_DIR="$(mktemp -d -q -t "$(basename "${BASH_SOURCE[0]}")")" && readonly TEMP_DIR
PWD="$(pwd)" && readonly PWD
CURL="$(command -v curl)" && readonly CURL
declare -ar LINKED_CONFIGS=(
  vimrc
  bashrc
  tmux.conf
  psqlrc
  load_virtualenvwrapper.sh
  inputrc
  ripgreprc
)

################################################################################
# Deletes the temp directory. Intended to be called automatically on script exit.
# Globals:
#   TEMP_DIR
################################################################################
function cleanup {
  rm -rf "${TEMP_DIR}"
}

################################################################################
# Prints a status message to STDOUT
# Globals:
#   BLUE
#   COLOR_OFF
# Arguments:
#   Variadic: arguments to printf. First is a formatting string. All following
#   are parameters to the formatting string.
################################################################################
function message {
  local -r msg="$1"; shift
  printf '%b '"${msg}"'\n' "${BLUE}INFO${COLOR_OFF}" "$@"
}

################################################################################
# Prints an error message to STDERR
# Globals:
#   COLOR_OFF
#   RED
# Arguments:
#   Variadic: arguments to printf. First is a formatting string. All following
#   are parameters to the formatting string.
################################################################################
function error {
  local -r msg="$1"; shift
  printf '%b '"${msg}"'\n' "${RED}ERROR${COLOR_OFF}" "$@" >&2
}

function hi {
  printf '%b' "${BLUE}$*${COLOR_OFF}"
}

function install_vim_plugins {
  local -r vim="$(command -v vim)"
  local -r vim_dir="${HOME}/.vim"

  if [[ ! -d "${vim_dir}" ]]; then
    if mkdir -p "${vim_dir}"; then
      message "Created vim directory at %s" "$(hi "${vim_dir}")"
    else
      error "Unable to create vim directory at %s" "$(hi "${vim_dir}")"
      exit 1
    fi
  fi

  local -r vim_plugin_loader="${vim_dir}/autoload/plug.vim"
  if [[ ! -s "${vim_plugin_loader}" ]]; then
    "${CURL}" \
      --insecure \
      --create-dirs \
      --silent \
      --fail \
      --location \
      --output "${vim_plugin_loader}" \
      https://raw.github.com/junegunn/vim-plug/master/plug.vim
    message "Installed %s at %s" "$(hi "${vim_plugin_loader}")"
  else
    message "Found %s at %s" "$(hi "${vim_plugin_loader}")"
  fi

  if rm -rf "${vim_dir}/plugged"; then
    message "Cleared installed vim plugins from %s" "$(hi "${vim_dir}")"
  else
    error "Unable to clear vim plugin directory %s" "$(hi "${vim_dir}")"
    exit 1
  fi

  local -r temp_vimrc="${TEMP_DIR}/vimrc"
  awk '/plug#begin/,/plug#end/' ~/.vimrc >| "${temp_vimrc}"
  message "Installing vim plugins..."

  # Match all lines in the temp .vimrc with this regex:
  # ^Plug '([^].*?)'.*$
  printf '%s\n' "$(sed -En 's!^Plug '"'"'([^/].*?)'"'"'.*$!'"${BLUE}"'INFO'"${COLOR_OFF}"'  \1!p' < "${temp_vimrc}" | sort -f)"
  if "${vim}" -e -i NONE -u "${temp_vimrc}" -U NONE +"PlugInstall!" +qall >/dev/null 2>&1; then
    message "...done!"
  else
    error "Unable to install vim plugins"
    # [01 Sep 2018] TODO:  Dump output of +PlugInstall! to stderr
    exit 1
  fi
}

function copy_gitconfig {
  local -r gitconfig="${HOME}/.gitconfig"
  if [[ -f "${gitconfig}" ]]; then
    message "Found %s" "$(hi "${HOME}/.gitconfig")"
    return
  fi

  local merge_strategy
  local -r git_version=$(git --version)
  if [[ "${git_version##git version }" =~ ^1 ]]; then
    sed '/default = simple/s/simple/matching/' "${PWD}/gitconfig" >| "${gitconfig}"
    merge_strategy="matching"
  else
    cp "${PWD}/gitconfig" "${gitconfig}"
    merge_strategy="simple"
  fi

  message "Installed gitconfig with %s default merge strategy" "$(hi "${merge_strategy}")"
}

function _try_link_or_exit {
  local -r source_file="${1}"
  local -r dest_file="${2}"

  if [[ ! -f "${source_file}" || ! -s "${source_file}" ]]; then
    return
  fi

  if ln -nsf "${source_file}" "${dest_file}" >/dev/null 2>&1; then
    message "Linked %s to %s" "$(hi "${source_file}" "$(hi "${dest_file}")")"
  else
    error "Unable to link %s to %s" "${source_file}" "$(hi "${dest_file}")"
    exit 1
  fi
}

function link_configs {
  for file in "${LINKED_CONFIGS[@]}"; do
    _try_link_or_exit "${PWD}/${file}" "${HOME}/.${file}"
  done || true

  local -r bashrc_dir="${HOME}/.bash.d"
  if ! mkdir -p "${bashrc_dir}"; then
    error "Unable to create bash.d directory at %s" "$(hi "${bashrc_dir}")"
  fi

  for file in "${PWD}"/bash.d/*; do
    _try_link_or_exit "${file}" "${bashrc_dir}/${file##*/}"
  done || true

  local config_dirs dest_dir
  read -ar config_dirs < <(find "${PWD}/config" -maxdepth 1 -mindepth 1 -type d -print0 | xargs -0 -n 1 basename)
  readonly config_dirs
  for source_dir in "${config_dirs[@]}"; do
    dest_dir="${HOME}/.config/${source_dir}"
    if ! mkdir -p "${dest_dir}"; then
      error "Unable to create .config directory at %s" "$(hi "${dest_dir}")"
      exit 1
    fi
    for file in "${PWD}/config/${source_dir}"/*; do
      _try_link_or_exit "${file}" "${dest_dir}/$(basename "${file}")"
    done
  done
}

function main {
  trap 'cleanup' EXIT

  # [31 Aug 2018] TODO:  Accept verbosity flag and email for .gitconfig

  link_configs
  copy_gitconfig
  install_vim_plugins
}

main "$@"
exit 0

# vim: ft=sh:sw=2:ts=2:et
