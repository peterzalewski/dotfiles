#!/usr/bin/env bash
##############################################################################
#/ Usage: $0 [-h|--help] [--no-*]
#/
#/ Install/update my dotfiles and work environment in these stages:
#/   1. (dotfiles) Link dotfiles, e.g. .bashrc, .inputrc
#/   2. (vim-plugins) Install vim plugins
#/   3. (bash-plugins) Link files in .bash.d/
#/   4. (dot-configs) Link files in .config/
#/
#/ Disable any stage by passing --no-${stage_name}. For example:
#/   ./install --no-vim-plugins
#/
#/ Other arguments:
#/   -h      display this usage information
#
# AUTHOR: Peter Zalewski <peter@zalewski.com>
# SOURCE: https://github.com/peterzalewski/dotfiles/blob/master/install
##############################################################################

set -o errexit
set -o nounset
set -o pipefail
set -o noclobber

declare BLUE BOLD COLOR_OFF GREEN RED
BLUE="$(tput setaf 6)" && readonly BLUE
BOLD="$(tput bold)" && readonly BOLD
COLOR_OFF="$(tput sgr0)" && readonly COLOR_OFF
GREEN="$(tput setaf 2)" && readonly GREEN
RED="$(tput setaf 1)" && readonly RED

declare CURL PWD STTY_OPTIONS TEMP_DIR
CURL="$(command -v curl)" && readonly CURL
PWD="$(pwd)" && readonly PWD
STTY_OPTIONS="$(stty -g)" && readonly STTY_OPTIONS
TEMP_DIR="$(mktemp -d -q -t "$(basename "${BASH_SOURCE[0]}")")" && readonly TEMP_DIR

declare -a DOTFILES_TO_LINK=(
  bash_profile
  bashrc
  gitconfig
  gitconfig-local
  inputrc
  psqlrc
  ripgreprc
  tmux-conf
  vimrc
  vimrc-local
)

################################################################################
# Deletes the temp directory. Intended to be called automatically on script exit.
# Globals:
#   STTY_OPTIONS
#   TEMP_DIR
################################################################################
function cleanup {
  rm -rf "${TEMP_DIR}"
  tput cnorm
  stty "${STTY_OPTIONS}"
}

################################################################################
# Prints a status message to STDOUT
# Globals:
#   BLUE
#   BOLD
#   COLOR_OFF
# Arguments:
#   Variadic: arguments to printf. First is a formatting string. All following
#   are parameters to the formatting string.
################################################################################
function message {
  local -r msg="$1"; shift
  printf '%b '"${msg}"'\n' "${BOLD}${BLUE}INFO${COLOR_OFF}" "$@"
}

################################################################################
# Prints an error message to STDERR
# Globals:
#   COLOR_OFF
#   BOLD
#   RED
# Arguments:
#   Variadic: arguments to printf. First is a formatting string. All following
#   are parameters to the formatting string.
################################################################################
function error {
  local -r msg="$1"; shift
  printf '%b '"${msg}"'\n' "${BOLD}${RED}ERROR${COLOR_OFF}" "$@" >&2
}

################################################################################
# Prints an error message to STDERR
# Globals:
#   COLOR_OFF
#   GREEN
# Arguments:
#   Variadic: arguments to printf. All arguments are passed to printf without
#   expansion, which means formatting is NOT respected.
################################################################################
function hi {
  printf '%b' "${GREEN}$*${COLOR_OFF}"
}

################################################################################
# Print script usage information
################################################################################
function usage {
  grep '^#/' < "${BASH_SOURCE[0]}" | cut -c4- | sed s/\$0/"$(basename "${BASH_SOURCE[0]}")"/g
}

################################################################################
# Install vim plugins. This means first creating ~/.vim and installing
# https://github.com/junegunn/vim-plug manually, and then running +PlugInstall.
# Globals:
#   BLUE
#   COLOR_OFF
#   CURL
#   HOME
#   TEMP_DIR
################################################################################
function install_vim_plugins {
  local -r vim="$(command -v vim)"
  local -r vim_dir="${HOME}/.vim"

  if [[ ! -d "${vim_dir}" ]]; then
    if mkdir -p "${vim_dir}"; then
      message "Created vim directory at %s" "$(hi "${vim_dir}")"
    else
      error "Unable to create vim directory at %s" "$(hi "${vim_dir}")"
      exit 1
    fi
  fi

  local -r vim_plugin_loader="${vim_dir}/autoload/plug.vim"
  if [[ ! -s "${vim_plugin_loader}" ]]; then
    "${CURL}" \
      --insecure \
      --create-dirs \
      --silent \
      --fail \
      --location \
      --output "${vim_plugin_loader}" \
      https://raw.github.com/junegunn/vim-plug/master/plug.vim
    message "Installed %s at %s" "$(hi "${vim_plugin_loader}")"
  else
    message "Found %s at %s" "$(hi "${vim_plugin_loader}")"
  fi

  if rm -rf "${vim_dir}/plugged"; then
    message "Cleared installed vim plugins from %s" "$(hi "${vim_dir}")"
  else
    error "Unable to clear vim plugin directory %s" "$(hi "${vim_dir}")"
    exit 1
  fi

  local -r temp_vimrc="${TEMP_DIR}/vimrc"
  awk '/plug#begin/,/plug#end/' ~/.vimrc >| "${temp_vimrc}"
  message "Installing vim plugins..."

  # Match all lines in the temp .vimrc with this regex:
  # ^Plug '([^/]\S*)'.*$
  printf '%s\n' "$(sed -En 's!^Plug '"'"'([^/]\S*)'"'"'.*$!'"${BOLD}${BLUE}"'INFO'"${COLOR_OFF}"'  \1!p' < "${temp_vimrc}" | sort -f)"
  if "${vim}" -e -i NONE -u "${temp_vimrc}" -U NONE +"PlugInstall!" +qall >/dev/null 2>&1; then
    message "...done!"
  else
    error "Unable to install vim plugins"
    # 2018-09-01 TODO: Dump output of +PlugInstall! to stderr
    exit 1
  fi
}

################################################################################
# Attempt to create a symbolic link.
# Arguments:
#   source_file: Required. The source file for the symbolic link.
#   dest_file: Required. The target file for the symbolic link.
################################################################################
function _try_link_or_exit {
  local -r source_file="${1}"
  local -r dest_file="${2}"

  if [[ ! -f "${source_file}" || ! -s "${source_file}" ]]; then
    return
  fi

  if ln -nsf "${source_file}" "${dest_file}" >/dev/null 2>&1; then
    message "Linked %s to %s" "$(hi "${source_file}")" "$(hi "${dest_file}")"
  else
    error "Unable to link %s to %s" "${source_file}" "$(hi "${dest_file}")"
    exit 1
  fi
}

################################################################################
# Link dotfiles to their expected locations. This is destructive.
# Globals:
#   DOTFILES_TO_LINK
#   HOME
#   PWD
################################################################################
function link_dotfiles {
  for file in "${DOTFILES_TO_LINK[@]}"; do
    _try_link_or_exit "${PWD}/${file}" "${HOME}/.${file//-/.}"
  done || true
}

################################################################################
# Link miscellaneous Bash functions and commands under bash.d.
# Globals:
#   HOME
#   PWD
################################################################################
function link_bash_plugins {
  local -r bashrc_dir="${HOME}/.bash.d"
  if ! mkdir -p "${bashrc_dir}"; then
    error "Unable to create bash.d directory at %s" "$(hi "${bashrc_dir}")"
  fi

  for file in "${PWD}"/bash.d/*; do
    _try_link_or_exit "${file}" "${bashrc_dir}/${file##*/}"
  done || true
}

################################################################################
# Link application configurations under .config.
# Globals:
#   HOME
#   PWD
################################################################################
function link_dot_config {
  local config_dirs dest_dir
  read -r -a config_dirs < <(find "${PWD}/config" -maxdepth 1 -mindepth 1 -type d -print0 | xargs -0 -n 1 basename)
  readonly config_dirs
  for source_dir in "${config_dirs[@]}"; do
    dest_dir="${HOME}/.config/${source_dir}"
    if ! mkdir -p "${dest_dir}"; then
      error "Unable to create .config directory at %s" "$(hi "${dest_dir}")"
      exit 1
    fi
    for file in "${PWD}/config/${source_dir}"/*; do
      _try_link_or_exit "${file}" "${dest_dir}/$(basename "${file}")"
    done
  done
}

################################################################################
# Attempt to link configurations and install plugins and components for my
# commonly used programs e.g. vim.
# Globals:
#   DOTFILES_TO_LINK
################################################################################
function main {
  local is_installing_vim_plugins=1 is_linking_bash_plugins=1
  local is_linking_dot_config=1 is_linking_dotfiles=1
  local arg

  while [[ "$#" -gt 0 ]]; do
    case "${1}" in
      -h|--help)
        usage
        exit 0
        ;;
      --no-*)
        arg="${1#--no-}"
        case "${arg}" in
          bash-plugins) is_linking_bash_plugins=0 ;;
          dotfiles) is_linking_dotfiles=0 ;;
          dot-config) is_linking_dot_config=0 ;;
          vim-plugins) is_installing_vim_plugins=0 ;;
          *)
            if [[ "${DOTFILES_TO_LINK[*]}" =~ $arg ]]; then
              DOTFILES_TO_LINK=("${DOTFILES_TO_LINK[@]/$arg}")
            else
              error "Unknown action to disable: %s" "${arg}"
              usage
              exit 1
            fi
            ;;
        esac
        shift
        ;;
      *)
        error "Unknown option: %s" "${1}"
        usage
        exit 1
    esac
  done

  readonly DOTFILES_TO_LINK

  trap 'cleanup' EXIT
  stty -echo

  if [[ "${is_linking_dotfiles}" = 1 ]]; then
    message '==> Linking dotfiles'
    link_dotfiles
  fi

  if [[ "${is_installing_vim_plugins}" = 1 ]]; then
    message '==> Installing vim plugins'
    install_vim_plugins
  fi

  if [[ "${is_linking_bash_plugins}" = 1 ]]; then
    message '==> Linking plugins under .bash.d/'
    link_bash_plugins
  fi

  if [[ "${is_linking_dot_config}" = 1 ]]; then
    message '==> Linking configs under .config/'
    link_dot_config
  fi

  return 0
}

main "$@"
exit 0

# vim: ft=sh:sw=2:ts=2:et
